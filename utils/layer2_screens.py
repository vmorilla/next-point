#!/usr/bin/env python3

# Generates the layer2 data ASM file considering the size of the compressed layer2 files of each bank

import os
import sys
from typing import Dict, TypedDict


# Define the inner dictionary structure
class PageAddress(TypedDict):
    page: int
    address: int


# Define the outer dictionary type
ScreenData = Dict[str, PageAddress]

# Group of files corresponding to the same screen
FileSets = Dict[str, list]


def get_file_prefix(filename: str) -> str:
    # Returns the first part of the name until the first dot
    file = os.path.splitext(os.path.basename(filename))[0]
    no_ext = file.split(".")[0]
    no_ext = no_ext.replace("-", "_")
    no_ext = no_ext.replace(".", "_")

    return f"ly2_{no_ext}"


def get_file_symbol(filename: str) -> str:
    # Returns the symbol of the file, which is the name without the path and extension
    # And special characters replaced by underscores
    file = os.path.splitext(os.path.basename(filename))[0]
    file = file.replace("-", "_")
    file = file.replace(" ", "_")
    file = file.replace(".", "_")
    return file


def process_layer2_group(page_base: int, address: int, files: list) -> tuple[int, int]:
    """
    Obtains the address and page after including a set of files
    The address (in and out) shoudl have 0 as reference (the offset 0xc000 should be added later)
    """

    # We add two at the end of each file (but the last one), since the algorithm to decompress
    # returns the pointer past two bytes
    files_length = sum([os.path.getsize(file) for file in files]) + 2 * (len(files) - 1)
    end_address = address + files_length
    address = end_address % 8192
    page = page_base + (end_address // 8192)

    return page, address


def generate_asm_file(file_sets: FileSets, addresses: ScreenData, last_page: int):
    print("; File generated by layer2_screens.py")
    print("; Do not edit this file\n")

    files_with_sdcc_prefix = [f"_{file}" for file in file_sets.keys()]

    print(f"PUBLIC {", ".join(files_with_sdcc_prefix)}\n")

    for prefix, group in file_sets.items():
        page = addresses[prefix]["page"]
        address = addresses[prefix]["address"]
        print(f"SECTION PAGE_{page}\n")
        print(f"ORG 0x{address:X}\n")
        print(f"_{prefix}:")
        for index, file in enumerate(group):
            # Print the binary data of the file
            if index != 0:
                print(f"\tdefw 0")
            print(f'\tbinary "{file}"')
        print()

    print(f"\n; Last page used: {last_page}")


def generate_header_file(header_file: str, screen_data: ScreenData):
    # define equals to the file name without path, extension included
    define = os.path.splitext(os.path.basename(header_file))[0].upper()
    define = define.replace("-", "_")
    define = define.replace(".", "_")
    define = f"_{define}_H_"

    with open(header_file, "w") as header:
        header.write("// File generated by layer2_screens.py\n")
        header.write("// Do not edit this file\n\n")
        header.write(f"#ifndef {define}\n")
        header.write(f"#define {define}\n\n")

        for group, page_address in screen_data.items():
            # Print the page number for each group
            file_symbol = get_file_symbol(group)
            # A bit unorthodox but should work
            header.write(
                f"#define {file_symbol.upper()}_PAGE {page_address['page']}\n"
                f"#define {file_symbol.upper()}_ADDRESS (const void *)0x{page_address['address']:X}\n"
                f"#define {file_symbol.upper()} {file_symbol.upper()}_PAGE, {file_symbol.upper()}_ADDRESS\n"
            )
            header.write(f"extern const void* {file_symbol};\n")
            header.write("\n")

        header.write("\n#endif\n")


def main():
    """
    Generates the layer2 data ASM file considering the size of the compressed layer2 files of each bank.
    The asm file is generated in the standard output.
    The header file is generated in the first argument of the command line.
    """

    header_file = sys.argv[1]

    # Reads the path of compressed files from the first argument of the command line and the output file from the second one
    files = sys.argv[2:]

    # for i in files:
    #     print(f"Processing {i}...")

    # Group the files by their prefix
    files_by_prefix: FileSets = {}
    for file in files:
        # Get the prefix of the file
        file_prefix = get_file_prefix(file)
        if file_prefix not in files_by_prefix:
            files_by_prefix[file_prefix] = []
        files_by_prefix[file_prefix].append(file)

    addresses: ScreenData = {}

    # TODO: pass as parameters
    base_page = 70
    base_address = 0xC000

    page = base_page
    address = 0

    for prefix, files in files_by_prefix.items():
        addresses[prefix] = {"page": page, "address": address + base_address}
        page, address = process_layer2_group(page, address, files)

    generate_header_file(header_file, addresses)
    generate_asm_file(files_by_prefix, addresses, page)


if __name__ == "__main__":
    main()


# PUBLIC _layer2_screen

# SECTION PAGE_80

# _layer2_screen:
#     defb 80
#     defw _madrid_court_0_address
#     defb 80
#     defw _madrid_court_1_address
#     defb 80
#     defw _madrid_court_2_address
#     defb 80
#     defw _madrid_court_3_address
#     defb 81
#     defw _madrid_court_4_address

# _madrid_court_0_address:
#     binary "../build/court-madrid.bank_0.ly2.zx7"
# _madrid_court_1_address:
#     binary "../build/court-madrid.bank_1.ly2.zx7"
# _madrid_court_2_address:
#     binary "../build/court-madrid.bank_2.ly2.zx7"
# _madrid_court_3_address:
#     binary "../build/court-madrid.bank_3.ly2.zx7"

# SECTION PAGE_81

# _madrid_court_4_address:
#     binary "../build/court-madrid.bank_4.ly2.zx7"


# SECTION PAGE_82
#     defb 82
#     defw _intro_screen_block_0_address
#     defb 83
#     defw _intro_screen_block_1_address
#     defb 84
#     defw _intro_screen_block_2_address
#     defb 85
#     defw _intro_screen_block_3_address
#     defb 86
#     defw _intro_screen_block_4_address

# _intro_screen_block_0_address:
#     binary "../build/intro-screen.bank_0.ly2.zx7"

# SECTION PAGE_83

# _intro_screen_block_1_address:
#     binary "../build/intro-screen.bank_1.ly2.zx7"

# SECTION PAGE_84

# _intro_screen_block_2_address:
#     binary "../build/intro-screen.bank_2.ly2.zx7"

# SECTION PAGE_85

# _intro_screen_block_3_address:
#     binary "../build/intro-screen.bank_3.ly2.zx7"

# SECTION PAGE_86

# _intro_screen_block_4_address:
#     binary "../build/intro-screen.bank_4.ly2.zx7"
