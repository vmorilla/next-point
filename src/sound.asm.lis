/tmp/tmpp5hm1k7G.asm:
     1                          MODULE sound_asm
     2                          LINE 0, "sound.asm"
sound.asm:
                                
     1                          
     2                          SECTION code_user
     3                          
     4                          include "macros.inc"
macros.inc:
     1                          #define READ_NEXTREG(REG) \
     2                              push bc : \
     3                              ld a, REG :\
     4                              ld bc, $243b :\
     5                              out (c), a :\
     6                              inc b :\
     7                              in a, (c) :\
     8                              pop bc
     9                          
    10                          
    11                          defc CTC0 = 0x183B ; CTC channel 0 port
    12                          defc CTC1 = 0x193B ; CTC channel 1 port
    13                          defc CTC2 = 0x1A3B ; CTC channel 2 port
    14                          defc CTC3 = 0x1B3B ; CTC channel 3 port
    15                          
    16                          defc IO_DAC_L0 = 0x0f
    17                          defc IO_DAC_L1 = 0x1f
    18                          defc IO_DAC_R0 = 0x4f
    19                          defc IO_DAC_R1 = 0x5f
    20                          defc IO_DAC_M0 = 0xdf
    21                          
    22                          defc INTERRUPT_STATUS_CTC = $C9
    23                          
    24                          defc REG_MMU6 = 0x56
    25                          
    26                          defc AY_REG = 0xFFFD ;   // AY register select port
    27                          defc AY_DATA = 0xBFFD ; // AY register data port
    28                          
    29                          defc AY_TONE_A_LO = 0x00 ; // R0 fine tune A
    30                          defc AY_TONE_A_HI = 0x01 ; // R1 coarse tune A
    31                          defc AY_TONE_B_LO = 0x02 ; // R2 fine tune B
    32                          defc AY_TONE_B_HI = 0x03 ; // R3 coarse tune B
    33                          defc AY_TONE_C_LO = 0x04 ; // R4 fine tune C
    34                          defc AY_TONE_C_HI = 0x05 ; // R5 coarse tune C
    35                          defc AY_NOISE = 0x06 ; // R6 noise period
    36                          defc AY_MIXER = 0x07 ; // R7 mixer register
    37                          defc AY_VOLUME_A = 0x08 ; // R8 volume A
    38                          defc AY_VOLUME_B = 0x09 ; // R9 volume B
    39                          defc AY_VOLUME_C = 0x0A ; // R10 volume C
    40                          defc AY_ENV_LO = 0x0B ; // R11 envelope low
    41                          defc AY_ENV_HI = 0x0C ; // R12 envelope high
    42                          defc AY_ENV_SHAPE = 0x0D ; // R13 envelope shape
    43                          
sound.asm:
     5                          
     6                          PUBLIC _sound_interrupt_handler
     7                          PUBLIC _init_sound
     8                          PUBLIC _current_sample_pointer, _current_sample_length, _current_sample_page
     9                          PUBLIC _current_sample_pointer_b, _current_sample_length_b, _current_sample_page_b
    10                          PUBLIC _play_sound, _play_sound_channel_b
    11                          
    12                          #define SOUNDS_TABLE_PAGE 100
    13                          
    14                          _sound_interrupt_handler:
    15                              ;NEXTREG INTERRUPT_STATUS_CTC, 1
    16  0000  f5                    push af
    17  0001  c5                    push bc
    18  0002  e5                    push hl
    19  0003  dde5                  push ix
    20                          
    21                              ; Saves the current page in MMU 6
    22  0005  c53e56013b24ed79      READ_NEXTREG(REG_MMU6)
              04ed78c1          
    23  0011  f5                    push af
    24                          
    25  0012  dd216500              ld ix, _current_sample_page
    26  0016  01df00                ld bc, IO_DAC_M0
    27  0019  cd3500                call _sound_interrupt_handler_channel
    28                          
    29  001c  0e1f                  ld c, IO_DAC_L1
    30  001e  dd216a00              ld ix, _current_sample_page_b
    31  0022  cd3500                call _sound_interrupt_handler_channel
    32                          
    33                              ; Restores the currengt page in MMU 6
    34  0025  f1                    pop af
    35  0026  ed9256                nextreg REG_MMU6, a
    36                          
    37  0029  dde1                  pop ix
    38  002b  e1                    pop hl
    39  002c  c1                    pop bc
    40  002d  f1                    pop af
    41  002e  ed91c901              NEXTREG INTERRUPT_STATUS_CTC, 1
    42  0032  fb                    ei
    43  0033  ed4d                  reti
    44                          ; ---------------------------------------------------------------
    45                          
    46                          _sound_interrupt_handler_channel:
    47  0035  dd6e03dd6604          ld hl, (ix + 3) ;  sample length
    48  003b  7c                    ld a, h
    49  003c  b5                    or l
    50  003d  c8                    ret z
    51  003e  2b                    dec hl
    52  003f  dd7503dd7404          ld (ix + 3), hl
    53                          
    54  0045  dd7e00                ld a, (ix + 0) ; sample page
    55  0048  ed9256                nextreg REG_MMU6, a
    56  004b  dd6e01dd6602          ld hl, (ix + 1) ; sample pointer
    57                          
    58  0051  7e                    ld a, (hl)
    59  0052  ed79                  out (c), a
    60  0054  23                    inc hl
    61                              ; Since using memory slot 6, the sample is in address 0xc000 to 0xdfff
    62  0055  cb6c                  bit 5, h ; Runs after 0xdfff (new page)
    63  0057  2805                  jr z, no_new_page
    64                          
    65  0059  26c0                  ld h, $c0   ; sets h at the beginning of the page ($c000)
    66  005b  dd3400                inc (ix + 0) ; increases the sample page for next sample
    67                          
    68                          no_new_page:
    69  005e  dd7501dd7402          ld (ix + 1), hl ; update sample pointer
    70  0064  c9                    ret
    71                          
    72                          ; TODO: use a structure
    73                          
    74                          _current_sample_page:
    75  0065  00                    defb 0
    76                          _current_sample_pointer:
    77  0066  0000                  defw 0
    78                          _current_sample_length:
    79  0068  0000                  defw 0
    80                          _end_current_sample:
    81                          
    82                          _current_sample_page_b:
    83  006a  00                    defb 0
    84                          _current_sample_pointer_b:
    85  006b  0000                  defw 0
    86                          _current_sample_length_b:
    87  006d  0000                  defw 0
    88                          
    89                          ; ---------------------------------------------------------------
    90                          ; Structure size of the sound sample... used to calculate the offset of the sample
    91                          ; and paste it in the current sample data
    92                          defc CURRENT_SAMPLE_SIZE = _end_current_sample - _current_sample_page
    93                          
    94                          _init_sound:
    95                              ; Clock frequency = CPU frequency / ( 16 * ( 1 + time constant ) )
    96  006f  2685                  ld h, 10000101b  ; No interrupt follows vector
    97                                              ; 7: Enable (1) / disable (0) interrupt
    98                                              ; 6: Counter mode (1) / timer mode (0)
    99                                              ; 5: Prescaler 256 (1) / 16 (0)
   100                                              ; 4: Edge selection: 0 = falling, 1 = rising
   101                                              ; 3: Timer trigger: 0 = automatic trigger when time constant is loaded, 1 = clk starts timer
   102                                              ; 2: Time constant: 0 = no time constant follows, 1 = time constant follows
   103                                              ; 1: Reset: 0 = continue operation / 1 = software reset
   104                                              ; 0: Vector (0) / control word (1)
   105                              ;ld l, 218      ; 217 : 8kHz = 28MHz / (16 * (1 + 218))
   106                          
   107  0071  2e6d                  ld l,  109     ; 16kHz = 28MHz / (16 * (1 + 109))
   108  0073  013b18                ld	bc,CTC0		; Channel 0 port
   109  0076  ed61              	out	(c),h		; Control word
   110  0078  ed69              	out	(c),l
   111  007a  c9                    ret
   112                          
   113                          ;---------------------------------------------------------------
   114                          ; play_sound(SoundSampleEnum) _z88dk_fastcall
   115                          ;    a: sound sample number
   116                          ;    Modifies: A, DE, HL, BC
   117                          ;---------------------------------------------------------------
   118                          
   119                          EXTERN _sounds_table
   120                          
   121                          ; -----------------------------------------------------------------
   122                          ; Puts the data of a sound sample in L in the selected channel
   123                          ; L = Sound sample number
   124                          ; BC = Address of sound data of the selected channel
   125                          ;     BC = _current_sound_page or _current_sound_page_b
   126                          ; ------------------------------------------------------------------
   127                          _play_sound_selected_channel:
   128                              ; Saves the page of slot 6
   129  007b  f5                    push af
   130                              ; Multiplies the sound sample number by 5, to locate the entry of the sound sample data in the table
   131  007c  5d                    ld e, l
   132  007d  1605                  ld d, CURRENT_SAMPLE_SIZE
   133  007f  ed30                  mul d, e
   134                          
   135                          
   136                              ; Sets slot 6 to the sound sample table page
   137  0081  ed915664              nextreg REG_MMU6, SOUNDS_TABLE_PAGE
   138                          
   139                              ; Gets the sound sample address
   140  0085  210000                ld hl, _sounds_table
   141  0088  19                    add hl, de
   142                          
   143                              ; Copies the sound
   144  0089  5059                  ld de, bc
   145  008b  010500                ld bc, CURRENT_SAMPLE_SIZE
   146  008e  f3                    di
   147  008f  edb0                  ldir
   148  0091  fb                    ei
   149                          
   150                              ; Restores the memory slot 6 page
   151  0092  f1                    pop af
   152  0093  ed9256                nextreg REG_MMU6, a
   153                          
   154  0096  c9                    ret
   155                          
   156                          ; -----------------------------------------------------------------
   157                          ; Puts the data of a sound sample in L in the channel A
   158                          ; L = Sound sample number  (__z88dk_fastcall)
   159                          ; ------------------------------------------------------------------
   160                          _play_sound:
   161  0097  c53e56013b24ed79      READ_NEXTREG(REG_MMU6)  ; Modifies BC!
              04ed78c1          
   162  00a3  016500                ld bc, _current_sample_page
   163  00a6  18d3                  jr _play_sound_selected_channel
   164                          
   165                          ; -----------------------------------------------------------------
   166                          ; Puts the data of a sound sample in L in the channel A
   167                          ; L = Sound sample number (__z88dk_fastcall)
   168                          ; ------------------------------------------------------------------
   169                          _play_sound_channel_b:
   170  00a8  c53e56013b24ed79      READ_NEXTREG(REG_MMU6)  ; Modifies BC!
              04ed78c1          
   171  00b4  016a00                ld bc, _current_sample_page_b
   172  00b7  18c2                  jr _play_sound_selected_channel
   173                          ; -----------------------------------------------------------------
   174                          
